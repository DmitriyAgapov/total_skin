# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Role {
  id: ID!
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageContent: BooleanFilter
  canManageUsers: BooleanFilter
  users: UserManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageContent: OrderDirection
  canManageUsers: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RoleUpdateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: RoleWhereInput
  address: StringFilter
  phone: StringFilter
  instagram: StringFilter
  facebook: StringFilter
  linkedin: StringFilter
  emailContacts: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  instagram: OrderDirection
  facebook: OrderDirection
  linkedin: OrderDirection
  emailContacts: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Callback {
  id: ID!
  name: String
  email: String
  phone: String
  publishedDate: DateTime
  message: String
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CallbackWhereUniqueInput {
  id: ID
}

input CallbackWhereInput {
  AND: [CallbackWhereInput!]
  OR: [CallbackWhereInput!]
  NOT: [CallbackWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  publishedDate: DateTimeNullableFilter
  message: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CallbackOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  publishedDate: OrderDirection
  message: OrderDirection
}

input CallbackUpdateInput {
  name: String
  email: String
  phone: String
  publishedDate: DateTime
  message: String
}

input CallbackUpdateArgs {
  where: CallbackWhereUniqueInput!
  data: CallbackUpdateInput!
}

input CallbackCreateInput {
  name: String
  email: String
  phone: String
  publishedDate: DateTime
  message: String
}

type Tag {
  id: ID!
  title: String
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  title: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input TagUpdateInput {
  title: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  title: String
}

type Post {
  id: ID!
  order: Int
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldOutput
  content: Post_content_Document
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  author: User
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
  slug: StringFilter
  status: StringNullableFilter
  date: DateTimeNullableFilter
  tag: TagManyRelationFilter
  author: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  date: OrderDirection
}

input PostUpdateInput {
  order: Int
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldInput
  content: JSON
  tag: TagRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  order: Int
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldInput
  content: JSON
  tag: TagRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type ProductCategory {
  id: ID!
  title: String
  slug: String
  status: String
  image: ImageFieldOutput
  content: ProductCategory_content_Document
}

type ProductCategory_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductCategoryWhereUniqueInput {
  id: ID
  slug: String
}

input ProductCategoryWhereInput {
  AND: [ProductCategoryWhereInput!]
  OR: [ProductCategoryWhereInput!]
  NOT: [ProductCategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  status: StringNullableFilter
}

input ProductCategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
}

input ProductCategoryUpdateInput {
  title: String
  slug: String
  status: String
  image: ImageFieldInput
  content: JSON
}

input ProductCategoryUpdateArgs {
  where: ProductCategoryWhereUniqueInput!
  data: ProductCategoryUpdateInput!
}

input ProductCategoryCreateInput {
  title: String
  slug: String
  status: String
  image: ImageFieldInput
  content: JSON
}

type ProductSkinConcern {
  id: ID!
  title: String
  slug: String
  status: String
  image: ImageFieldOutput
  content: ProductSkinConcern_content_Document
}

type ProductSkinConcern_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductSkinConcernWhereUniqueInput {
  id: ID
  slug: String
}

input ProductSkinConcernWhereInput {
  AND: [ProductSkinConcernWhereInput!]
  OR: [ProductSkinConcernWhereInput!]
  NOT: [ProductSkinConcernWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  status: StringNullableFilter
}

input ProductSkinConcernOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
}

input ProductSkinConcernUpdateInput {
  title: String
  slug: String
  status: String
  image: ImageFieldInput
  content: JSON
}

input ProductSkinConcernUpdateArgs {
  where: ProductSkinConcernWhereUniqueInput!
  data: ProductSkinConcernUpdateInput!
}

input ProductSkinConcernCreateInput {
  title: String
  slug: String
  status: String
  image: ImageFieldInput
  content: JSON
}

type ProductSkinCareItemType {
  id: ID!
  title: String
  slug: String
  status: String
  image: ImageFieldOutput
  content: ProductSkinCareItemType_content_Document
}

type ProductSkinCareItemType_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductSkinCareItemTypeWhereUniqueInput {
  id: ID
  slug: String
}

input ProductSkinCareItemTypeWhereInput {
  AND: [ProductSkinCareItemTypeWhereInput!]
  OR: [ProductSkinCareItemTypeWhereInput!]
  NOT: [ProductSkinCareItemTypeWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  status: StringNullableFilter
}

input ProductSkinCareItemTypeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
}

input ProductSkinCareItemTypeUpdateInput {
  title: String
  slug: String
  status: String
  image: ImageFieldInput
  content: JSON
}

input ProductSkinCareItemTypeUpdateArgs {
  where: ProductSkinCareItemTypeWhereUniqueInput!
  data: ProductSkinCareItemTypeUpdateInput!
}

input ProductSkinCareItemTypeCreateInput {
  title: String
  slug: String
  status: String
  image: ImageFieldInput
  content: JSON
}

type ProductVariant {
  id: ID!
  title: String
  value: String
  price: Int
  product: Product
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  title: StringFilter
  value: StringFilter
  price: IntNullableFilter
  product: ProductWhereInput
}

input ProductVariantOrderByInput {
  id: OrderDirection
  title: OrderDirection
  value: OrderDirection
  price: OrderDirection
}

input ProductVariantUpdateInput {
  title: String
  value: String
  price: Int
  product: ProductRelateToOneForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  title: String
  value: String
  price: Int
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Product {
  id: ID!
  sku: String
  series: String
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldOutput
  shortDesc: Product_shortDesc_Document
  productVariant(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariantCount(where: ProductVariantWhereInput! = {}): Int
  description: Product_description_Document
  benefit: Product_benefit_Document
  ingridient: Product_ingridient_Document
  application: Product_application_Document
  category: ProductCategory
  SkinConcern: ProductSkinConcern
  SkinCareItemType: ProductSkinCareItemType
}

type Product_shortDesc_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Product_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Product_benefit_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Product_ingridient_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Product_application_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  sku: StringFilter
  series: StringFilter
  title: StringFilter
  slug: StringFilter
  status: StringNullableFilter
  date: DateTimeNullableFilter
  productVariant: ProductVariantManyRelationFilter
  category: ProductCategoryWhereInput
  SkinConcern: ProductSkinConcernWhereInput
  SkinCareItemType: ProductSkinCareItemTypeWhereInput
}

input ProductVariantManyRelationFilter {
  every: ProductVariantWhereInput
  some: ProductVariantWhereInput
  none: ProductVariantWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  sku: OrderDirection
  series: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  date: OrderDirection
}

input ProductUpdateInput {
  sku: String
  series: String
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldInput
  shortDesc: JSON
  productVariant: ProductVariantRelateToManyForUpdateInput
  description: JSON
  benefit: JSON
  ingridient: JSON
  application: JSON
  category: ProductCategoryRelateToOneForUpdateInput
  SkinConcern: ProductSkinConcernRelateToOneForUpdateInput
  SkinCareItemType: ProductSkinCareItemTypeRelateToOneForUpdateInput
}

input ProductVariantRelateToManyForUpdateInput {
  disconnect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductCategoryRelateToOneForUpdateInput {
  create: ProductCategoryCreateInput
  connect: ProductCategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductSkinConcernRelateToOneForUpdateInput {
  create: ProductSkinConcernCreateInput
  connect: ProductSkinConcernWhereUniqueInput
  disconnect: Boolean
}

input ProductSkinCareItemTypeRelateToOneForUpdateInput {
  create: ProductSkinCareItemTypeCreateInput
  connect: ProductSkinCareItemTypeWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  sku: String
  series: String
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldInput
  shortDesc: JSON
  productVariant: ProductVariantRelateToManyForCreateInput
  description: JSON
  benefit: JSON
  ingridient: JSON
  application: JSON
  category: ProductCategoryRelateToOneForCreateInput
  SkinConcern: ProductSkinConcernRelateToOneForCreateInput
  SkinCareItemType: ProductSkinCareItemTypeRelateToOneForCreateInput
}

input ProductVariantRelateToManyForCreateInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductCategoryRelateToOneForCreateInput {
  create: ProductCategoryCreateInput
  connect: ProductCategoryWhereUniqueInput
}

input ProductSkinConcernRelateToOneForCreateInput {
  create: ProductSkinConcernCreateInput
  connect: ProductSkinConcernWhereUniqueInput
}

input ProductSkinCareItemTypeRelateToOneForCreateInput {
  create: ProductSkinCareItemTypeCreateInput
  connect: ProductSkinCareItemTypeWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCallback(data: CallbackCreateInput!): Callback
  createCallbacks(data: [CallbackCreateInput!]!): [Callback]
  updateCallback(
    where: CallbackWhereUniqueInput!
    data: CallbackUpdateInput!
  ): Callback
  updateCallbacks(data: [CallbackUpdateArgs!]!): [Callback]
  deleteCallback(where: CallbackWhereUniqueInput!): Callback
  deleteCallbacks(where: [CallbackWhereUniqueInput!]!): [Callback]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createProductCategory(data: ProductCategoryCreateInput!): ProductCategory
  createProductCategories(
    data: [ProductCategoryCreateInput!]!
  ): [ProductCategory]
  updateProductCategory(
    where: ProductCategoryWhereUniqueInput!
    data: ProductCategoryUpdateInput!
  ): ProductCategory
  updateProductCategories(
    data: [ProductCategoryUpdateArgs!]!
  ): [ProductCategory]
  deleteProductCategory(
    where: ProductCategoryWhereUniqueInput!
  ): ProductCategory
  deleteProductCategories(
    where: [ProductCategoryWhereUniqueInput!]!
  ): [ProductCategory]
  createProductSkinConcern(
    data: ProductSkinConcernCreateInput!
  ): ProductSkinConcern
  createProductSkinConcerns(
    data: [ProductSkinConcernCreateInput!]!
  ): [ProductSkinConcern]
  updateProductSkinConcern(
    where: ProductSkinConcernWhereUniqueInput!
    data: ProductSkinConcernUpdateInput!
  ): ProductSkinConcern
  updateProductSkinConcerns(
    data: [ProductSkinConcernUpdateArgs!]!
  ): [ProductSkinConcern]
  deleteProductSkinConcern(
    where: ProductSkinConcernWhereUniqueInput!
  ): ProductSkinConcern
  deleteProductSkinConcerns(
    where: [ProductSkinConcernWhereUniqueInput!]!
  ): [ProductSkinConcern]
  createProductSkinCareItemType(
    data: ProductSkinCareItemTypeCreateInput!
  ): ProductSkinCareItemType
  createProductSkinCareItemTypes(
    data: [ProductSkinCareItemTypeCreateInput!]!
  ): [ProductSkinCareItemType]
  updateProductSkinCareItemType(
    where: ProductSkinCareItemTypeWhereUniqueInput!
    data: ProductSkinCareItemTypeUpdateInput!
  ): ProductSkinCareItemType
  updateProductSkinCareItemTypes(
    data: [ProductSkinCareItemTypeUpdateArgs!]!
  ): [ProductSkinCareItemType]
  deleteProductSkinCareItemType(
    where: ProductSkinCareItemTypeWhereUniqueInput!
  ): ProductSkinCareItemType
  deleteProductSkinCareItemTypes(
    where: [ProductSkinCareItemTypeWhereUniqueInput!]!
  ): [ProductSkinCareItemType]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(
    where: ProductVariantWhereUniqueInput!
    data: ProductVariantUpdateInput!
  ): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(
    where: [ProductVariantWhereUniqueInput!]!
  ): [ProductVariant]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  callbacks(
    where: CallbackWhereInput! = {}
    orderBy: [CallbackOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Callback!]
  callback(where: CallbackWhereUniqueInput!): Callback
  callbacksCount(where: CallbackWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  productCategories(
    where: ProductCategoryWhereInput! = {}
    orderBy: [ProductCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductCategory!]
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  productCategoriesCount(where: ProductCategoryWhereInput! = {}): Int
  productSkinConcerns(
    where: ProductSkinConcernWhereInput! = {}
    orderBy: [ProductSkinConcernOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductSkinConcern!]
  productSkinConcern(
    where: ProductSkinConcernWhereUniqueInput!
  ): ProductSkinConcern
  productSkinConcernsCount(where: ProductSkinConcernWhereInput! = {}): Int
  productSkinCareItemTypes(
    where: ProductSkinCareItemTypeWhereInput! = {}
    orderBy: [ProductSkinCareItemTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductSkinCareItemType!]
  productSkinCareItemType(
    where: ProductSkinCareItemTypeWhereUniqueInput!
  ): ProductSkinCareItemType
  productSkinCareItemTypesCount(
    where: ProductSkinCareItemTypeWhereInput! = {}
  ): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
